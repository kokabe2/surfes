
@startuml class diagram
skinparam {
    defaultFontName Ricty Diminished
    monochrome true
}

package boot {
    class BootStrapper <<EntryPoint>> {
        +BootStrapper()
    }

    folder application {
        class BootApplication <<Static>> {
            +Run()
        }
    }

    folder script {
        class SystemScript <<SingleInstance>> {
            -factory: ISystemExecutorFactory
            +Create(ISystemExecutorFactory)
            +Destroy()
            +Run(int)
        }
        interface ISystemExecutable {
            +Execute(): int
        }
        interface ISystemExecutorFactory {
            +Make(int): ISystemExecutable
        }

        SystemScript --> ISystemExecutable
        SystemScript --> ISystemExecutorFactory
    }

    folder registries {
        class UserSystemFileProviderImpl <<Singleton>> {
            +getInstance(): IUserSystemFileProvider
        }
        class RunlevelProvider <<Static>> {
            +getDefaultRunlevel(): int
        }
    }

    folder systems {
        class SystemExecutorFactoryImpl <<Singleton>> {
            +getInstance(): ISystemExecutorFactory
        }
        class HaltSystem <<Singleton>> {
            +getInstance(): ISystemExecutable
        }
        interface HaltSystemServiceInterface {
            +Shutdown()
        }
        class RebootSystem <<Singleton>> {
            +getInstance(): ISystemExecutable
        }
        interface RebootSystemServiceInterface {
            +Reboot()
        }
        class UserSystem <<Singleton>> {
            -provider: IUserSystemFileProvider
            +Create(IUserSystemFileProvider)
            +Destroy()
            +UserSystem_getExecutor(int): ISystemExecutable
        }
        interface IUserSystemFileProvider {
            +getFileAddress(int): uintptr_t
        }

        HaltSystem <-- SystemExecutorFactoryImpl
        RebootSystem <-- SystemExecutorFactoryImpl
        UserSystem <-- SystemExecutorFactoryImpl
        HaltSystem --> HaltSystemServiceInterface
        RebootSystem --> RebootSystemServiceInterface
        UserSystem --> IUserSystemFileProvider
    }

    folder platforms {
        class Platform <<Static>> {
            +Initialize()
            +Abort()
        }
        class Section <<Static>> {
            +Initialize()
        }
        class ExeptionEvent <<Static>> {
            +Initialize()
        }
        class Microcontroller <<Static>> {
            +Initialize()
        }
        class foo <<Static>> {
            +Initialize()
        }
        class bar <<Static>> {
            +Initialize()
        }
        class baz <<Static>> {
            +Initialize()
        }
        class HaltSystemService <<Static>> {
            +Shutdown()
        }
        class RebootSystemService <<Static>> {
            +Reboot()
        }

        Section <-- Platform
        ExeptionEvent <-- Platform
        Microcontroller <-- Platform
        foo <-- Microcontroller
        bar <-- Microcontroller
        baz <-- Microcontroller
    }

    Platform <-- BootStrapper
    BootApplication <-- BootStrapper
    UserSystemFileProviderImpl <-- BootApplication
    UserSystem <-- BootApplication
    SystemScript <-- BootApplication
    RunlevelProvider <-- BootApplication
    SystemExecutorFactoryImpl <-- BootApplication

    IUserSystemFileProvider <|.. UserSystemFileProviderImpl
    ISystemExecutorFactory <|.. SystemExecutorFactoryImpl
    ISystemExecutable <|.. HaltSystem
    ISystemExecutable <|.. RebootSystem
    ISystemExecutable <|.. UserSystem
    HaltSystemServiceInterface <|.. HaltSystemService
    RebootSystemServiceInterface <|.. RebootSystemService
}

package registry {
    class RegistryApi <<Static>> {
        +getInstance(): RegistryApi
        +getIntRegistryValue(int): int
        +getUintptrRegistryValue(int): uintptr_t
    }
}

package utility {
    folder domains {
        class SifFile <<MultipleInstance>> {
            -version: uint64_t
            -entry_point: uintptr_t
            -Close: closeFunction
            +Open(uintptr_t): SifFile
            +Close()
            +getVersion(): uint64_t
            +getEntryPoint(): uintptr_t
        }
    }
}

UserSystem -> "0..5" SifFile
RunlevelProvider -> RegistryApi
UserSystemFileProviderImpl -> RegistryApi

registries <-[hidden]- platforms
@enduml
